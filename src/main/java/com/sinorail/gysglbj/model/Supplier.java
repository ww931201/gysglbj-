package com.sinorail.gysglbj.model;



import java.util.List;

import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.SqlPara;
import com.sinorail.gysglbj.model.base.BaseSupplier;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Supplier extends BaseSupplier<Supplier> {
	public static final Supplier dao = new Supplier().dao();
	
/*	public Page<Supplier> findPaginate(Integer pageNumber, Integer pageSize, Supplier supplier, CertificateSupcode certificatesupcode) {
		
		
		Kv cond = Kv.by("GYSBH", supplier.getGysbh()).set("QYMC",supplier.getQymc()).set("HMD",supplier.getHmd()).set("GYSJYFW",supplier.getGysjyfw()).set("CODE",certificatesupcode.getCode());
		
		//supplier.set("CODE", certificatesupcode);
		//SqlPara sqlp = getSqlPara("supplier.supplierList",supplier);
		
		
		SqlPara sqlp = getSqlPara("supplier.supplierList",cond);
		
		return paginate(pageNumber, pageSize, sqlp);
	}*/
	
	
	public Page<Supplier> findPaginate(Integer pageNumber, Integer pageSize, Supplier supplier, CertificateSupcode certificatesupcode,Certificate certificate,Suppliersort suppliersort,Suppliergrade suppliergrade) { 
		
		
		Kv cond = Kv.by("GYSBH", supplier.getGysbh()).set("QYMC",supplier.getQymc()).set("HMD",supplier.getHmd()).set("GYSJYFW",supplier.getGysjyfw()).set("CODE",certificatesupcode.getCode())
				.set("ZSLB",certificate.getZslb()).set("ZSXX",certificate.getZsxx()).set("GYSFL",supplier.getGysfl()).set("GYSQYXZ",supplier.getGysqyxz()).set("YXQ",supplier.getYxq()).set("BLGYSXYPJDJ",supplier.getBlgysxypjdj());  
		SqlPara sqlp = getSqlPara("supplier.supplierList",cond);
		
		return paginate(pageNumber, pageSize,sqlp);
	}
	
	/**
	 * 
	 * @param pageNumber
	 * @param pageSize
	 * @param supplier
	 * @param certificatesupcode
	 * @param certificate
	 * @return
	 */
	public List<Record> findExportGys(Supplier supplier, CertificateSupcode certificatesupcode,Certificate certificate,Suppliersort suppliersort,Suppliergrade suppliergrade) { 
		
		Kv cond = Kv.by("GYSBH", supplier.getGysbh()).set("QYMC",supplier.getQymc()).set("HMD",supplier.getHmd()).set("GYSJYFW",supplier.getGysjyfw()).set("CODE",certificatesupcode.getCode())
				.set("ZSLB",certificate.getZslb()).set("ZSXX",certificate.getZsxx()).set("GYSSORTNAME",suppliersort.getGyssortname()).set("GYSQYXZ",supplier.getGysqyxz()).set("YXQ",supplier.getYxq()).set("GRADEPJ",suppliergrade.getGradepj());  
		SqlPara sqlp = getSqlPara("supplier.supplierList2",cond);
		
		return Db.find(sqlp);
	}
	
	
	
	public List<Supplier> findGysbh(){
		String sql  = "select GYSBH from E_SUPPLIER ";
		return find(sql);  
	}
	
	
	/**
	 * 根据供应商编号查询供应商是否存在(添加)
	 * @param gysBh
	 * @return
	 */
	public boolean isExistGysbh(String gysBh) {
		Supplier supplier = findFirst(getSql("supplier.findByGysbh"),gysBh); 
		if(supplier == null){
			return false;
		}
		return true;
	}
	
	/**
	 * 根据供应商编号和id查供应商是否存在(修改)
	 * @param gysBh
	 * @param userId
	 * @return
	 */
	public boolean isExistGysbh(String gysBh, String SupId) {
		Supplier supplier = findFirst(getSql("supplier.findByGysbhAndId"), gysBh, SupId);
		if(supplier == null){
			return false;
		}
		return true;
	}
	
	/**
	 * 
	 * 
	 * @param SupId
	 * @return
	 */
	public Object queryById(String SupId) {
		return findFirst(getSql("supplier.selectById"), SupId);
	}
	

	/**
	 * 批量删除
	 * @param ids
	 * @return
	 */
	public boolean deleteByIds(String ids){
		
		boolean flag = true;
		String[] idArr = ids.split(",");
		for (String id : idArr) {
			if(Quote.dao.queryByCerId(id).size()>0){
				flag = false;
				continue;
			}else{
				deleteById(id);
			}
		}
		return flag;
	}
	
	
	public List<Supplier> findProjectOverDate(String strId){
		
		List<Supplier> supResult = find(getSql("supplier.findProjectOverDate"), strId , strId); 
		
		return supResult;
	}

	public Page<Supplier> findPaginateByZhcx(Integer pageNumber, Integer pageSize, Supplier supplier,
			Certificate certificate, CertificateSupcode certificatesupcode) {
		
		Kv cond = Kv.by("GYSBH", supplier.getGysbh()).set("QYMC",supplier.getQymc()).set("CODE",certificatesupcode.getCode()).set("NO",certificate.getNo()).set("NAME",certificate.getName()).set("ZSLB",certificate.getZslb());
 
		SqlPara sqlp = getSqlPara("supplier.joinList",cond);
		
		Page<Supplier> paginate = paginate(pageNumber, pageSize,sqlp);
		
		return paginate;
		
	}

	public List<Record> findExportSupAndCerAndCode(Supplier supplier, Certificate certificate, CertificateSupcode certificatesupcode) {
		Kv cond = Kv.by("GYSBH", supplier.getGysbh()).set("QYMC",supplier.getQymc()).set("CODE",certificatesupcode.getCode()).set("NO",certificate.getNo()).set("NAME",certificate.getName());
		 
		SqlPara sqlp = getSqlPara("supplier.joinList",cond);
		
		return Db.find(sqlp);
	}
	
}
